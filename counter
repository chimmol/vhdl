
library ieee ; 
use ieee.std_logic_1164.all ; 
use ieee.std_logic_arith.all ; 
use ieee.std_logic_unsigned.all ; 

entity counter is
	port (  clk , reset, ud : in std_logic ; 
			  sel : in std_logic_vector (1 downto 0 ) ; 
			  seg : out std_logic_vector ( 3 downto 0 ) ; 
			  d : out std_logic_vector ( 7 downto 0 ) 
		); 
end entity ; 

architecture design of counter is
   component freqOne is
	port ( clock, reset : in std_logic ; 
				oneHz : buffer std_logic );
	end component freqOne ; 
	
	component fndselect is
	port ( s : in std_logic_vector ( 1 downto 0 ); 
			seg : out std_logic_vector ( 3 downto 0 ) ) ; 
   end component fndselect ; 

	signal count : std_logic_vector ( 3 downto 0 ) := "0011" ; 
	signal oneHz : std_logic ; 
		
begin
   u1 : freqOne port map ( clk, reset, oneHz ) ; 
	u2 : fndselect port map ( sel, seg ) ; 
	
	-- count clk 
	pr1 : process ( oneHz , reset ) 
   begin 
	   if reset = '1' then 
			count <= "0000" ; 
		elsif  oneHz'event and oneHz = '1' then  
		   if ud = '1' then 
			   if count = "1001" then 
					count <= "0000" ; 
				else 
					count <= count + '1' ;
				end if; 
			else 
			   if count = "0000" then 
					count <= "1001" ; 
				else 
					count <= count - '1' ;
				end if; 
				
			end if; 						
		end if; 
	end process ;     
		
	-- display segment 
	pr2 : process ( count )
    begin 
		case count is
		    when "0000" => d <= x"3f"; 
		    when "0001" => d <= x"06"; 
		    when "0010" => d <= x"5B"; 
		    when "0011" => d <= x"4f"; 
		    when "0100" => d <= x"66"; 
		    when "0101" => d <= x"6d"; 
		    when "0110" => d <= x"7d"; 
		    when "0111" => d <= x"27"; 
		    when "1000" => d <= x"7F"; 
		    when "1001" => d <= x"67"; 
		    when others => d <= x"ff"; 	
		end case ;     
    end process ;     
end design; 
